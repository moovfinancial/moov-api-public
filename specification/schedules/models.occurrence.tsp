namespace MoovAPI;

@doc("Occurrences to either create or modify.")
model Occurrence {
  @doc("If set to true, will cancel the occurrence. If set false will resume the occurrence. If unset leaves the value unchanged.")
  canceled?: boolean;

  @doc("""
      If set this defines what occurrence to modify, if invalid will fail the request. 
      If null or "" it defines to add a new occurrence.
    """)
  @format("uuid")
  @example("c520f1b9-0ba7-42f5-b977-248cdbe41c69")
  occurrenceID?: string;

  @doc("Timestamp to run the transfer after. Value must be into the future.")
  @example(utcDateTime.fromISO("2009-11-10T23:00:00Z"))
  runOn?: utcDateTime;

  runTransfer?: RunTransfer;
}

model OccurrencesResponse {
  canceledOn?: utcDateTime;

  @doc("Contains details on why the occurrence errored.")
  error?: {
    message?: string;
  };

  @doc("True if this was generated by a RRule.")
  generated?: boolean;

  @doc("True if the RRule set runs indefinitely.")
  indefinite?: boolean;

  @doc("Sandbox or production status of this schedule.")
  mode?: Mode;

  @format("uuid")
  occurrenceID?: string;

  ranOn?: utcDateTime;

  @format("uuid")
  ranTransferID?: string;

  runOn: utcDateTime;
  runTransfer: RunTransfer;

  @format("uuid")
  scheduleID?: string;

  status?: OccurrenceStatus;
}

@doc("Status of the completed occurrence.")
enum OccurrenceStatus {
  pending,
  failed,
  completed,
}
